// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  admin         Boolean?
  emailVerified DateTime?
  firstName     String?
  lastName      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  channels      Channel[] @relation(fields: [channelIds], references: [id])
  channelIds    String[]  @db.ObjectId
  ownedChannels Channel[] @relation("admin")
  active        Boolean
  lastActive    DateTime
  readReceipts  Boolean
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())
  messages      Message[] @relation("author")

  @@map("users")
}

model Channel {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  admin    User      @relation(fields: [adminId], references: [id], "admin")
  adminId  String
  user     User[]    @relation(fields: [userIds], references: [id])
  userIds  String[]  @db.ObjectId
  messages Message[]
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())

  @@map("channels")
}

model Message {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  author       User         @relation(fields: [authorId], references: [id], "author")
  authorId     String
  channel      Channel?     @relation(fields: [channelId], references: [id])
  channelId    String?      @db.ObjectId
  body         String
  delivered    Boolean
  deliveredAt  DateTime?
  read         Boolean?
  attachements Attachment[]
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())

  @@map("messages")
}

model Attachment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
  gifLink   String?
  imageLink String?
  fileLink  String?
  fileType  String?
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime? @default(now())

  @@map("attachements")
}